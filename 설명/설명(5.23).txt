구조분해 할당, 프로미스, 프로토타입 상속

*구조 분해 할당
->나중에 react가서 많이 사용할거임
-배열이 있다면 각각의 변수로 저장해주기 위한
-배열과 객체의 값을 분해해서 변수에 할당해줌
-배열의 값을 복사한 후 변수에 할당해줌으로 배열을 수정 또는 파괴되지 않습니다.

ex>
let fruits = ["사과","수박","오렌지","딸기"]
let fruit1 = fruits[0];
let fruit2 = fruits[1];
let fruit3 = fruits[2];
let fruit4 = fruits[3];

//배열로 전달 받아서 배열에 있는 일부 값만 필요한 경우가 있고
//각각 값을 담아주고 전달할 필요 있음
	↓
--구조분해할당으로 변환--
1)기본구문 let [변수명, 변수명,...] = 배열변수		//변수 선언하고 [대괄호]이용
let [fruit1,fruit2,fruit3,fruit4] = fruits;

//배열을 변수로 분해
//원본 배열은 그대로 두고 원본 배열의 값을 새로운 변수에 담아주는 거
//fruits배열이 변형되거나 하는게 아님! - 여기있는 값을 참조해서 다른 변수에 할당해 주는거

2)쉼표를 사용하여 요소 무시하기
let fruits = ["사과","수박","오렌지","딸기"]
let [fruit1, ,fruit2] = fruits;		//->사과 와 오렌지만 받는 거임!!!

3)변수의 값을 교환
변수에 할당된 값을 교환할 때도 구조분해 할당을 사용할 수 있음.
구문>  [변수1, 변수2] = [변수2, 변수1]
ex>
let name = "green";
let admin = "admin";

admin엔 "green", name 엔 "admin"
[name, admin] = [admin, name];		//변수끼리 값을 바꿔치기 할 수 있음

cf.
let temp;
temp = name;
name = admin;
admin = temp;
이렇게 했었는데 구조분해할당으로 인해 변수의 값도 교환 가능해짐
이렇게 하는 거랑 같음(빈변수를 만들어서 옮겨줘야했었음)

4)나머지 매개변수를 활용한 나머지 요소 배열로 가져오기
구문> let [변수명1, 변수명2, ...변수명3] = 배열변수
ex>
let fruits = ["사과","수박","오렌지","딸기","키위"]
let [fruit1, fruit2, ...fruit3] = fruits;

fruit1 -> 사과
fruit2 -> 수박
fruit3 -> 오렌지 딸기 키위 를 배열로 받음!!

*객체 구조분해 할당
구조분해 할당으로 객체도 분해할 수 있음
구문> let {변수명1, 변수명2} = {키1 :...., 키2:...}
ex>
let options = {
	title: "Menu",
	width: 100,
	height: 200,
}
let {title, width, height} = options;
객체 키명: 변수명

1)객체의 키와 다른 변수명으로 할당
객체 키명: 변수명
let options = {
	width: 100,
	height: 200,
	title: "Menu",
}
let {title, width: w, height} = options;
let {title} = options;

2)나머지 패턴 '...'
let options = {
	width: 100,
	height: 200,
	title: "Menu",
}
let { title, ...rest} = options;

----
Q1. <중급> ex.html

let user = {
	name: "John",
	years: 30,
};

name 프로퍼티의 값을 변수 name에 할당하세요.
years 프로퍼티의 값을 변수 age에 할당하세요.
isAdmin 프로퍼티의 값을 변수 isAdmin에 할당하세요.
isAdmin이라는 프로퍼티가 없으면 false를 할당하세요.

-------------------

*프로토타입
(원형)
ex>콘솔창에 적어본거
let person1 = { name: 'gr', age: 30 }
undefined

person1
{name: 'gr', age: 30}age: 30name: "gr"
[[Prototype]]: Object

person1.hasOwnProperty('name')     //  hasOwnProperty 객체가 이걸 가지고 있는지 !
true			         //  키를 확인해주는 메서드!

person1.hasOwnProperty = function(){ console.log('하핳하하ㅏㅎ')}		//이렇게 값을 따로 주면
? (){ console.log('하핳하하ㅏㅎ')}

person1.hasOwnProperty()			//객체를 확인하는게 아니고 그 값이 그냥 뜸
하핳하하ㅏㅎ
.
.
.

-----
*
[[prototype]]
자바스크립트 객체는 [[prototype]]이라는 숨김 프로퍼티를 갖습니다.
이 숨김 프로퍼티가 다른 객체에 대한 참조가 되는데 
다른 객체를 참조하는 경우 참조 타입을 프로토타입이라고 부릅니다.








